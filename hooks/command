#!/bin/bash

set -euo pipefail

PLUGIN_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)/.."
MAX_SIZE=1024 # in KB

echo "--- :junit: Download the junits"

artifacts_dir="$(pwd)/$(mktemp -d "junit-annotate-plugin-artifacts-tmp.XXXXXXXXXX")"
annotation_dir="$(pwd)/$(mktemp -d "junit-annotate-plugin-annotation-tmp.XXXXXXXXXX")"
annotation_path="${annotation_dir}/annotation.md"

function cleanup {
  rm -rf "${artifacts_dir}"
  rm -rf "${annotation_dir}"
}

function check_size {
  local size_in_kb
  size_in_kb=$(du -k "${annotation_path}" | cut -f 1)
  [ "${size_in_kb}" -lt "${MAX_SIZE}" ]
}

trap cleanup EXIT

buildkite-agent artifact download \
  "${BUILDKITE_PLUGIN_JUNIT_ANNOTATE_ARTIFACTS}" \
  "$artifacts_dir"

echo "--- :junit: Processing the junits"

docker build -t junit_annotate_buildkite_plugin_workenv "$PLUGIN_DIR"

docker \
  --log-level "error" \
  run \
    --rm \
    --volume "$artifacts_dir:/junits" \
    --volume "$PLUGIN_DIR/ruby:/src" \
    --env "BUILDKITE_PLUGIN_JUNIT_ANNOTATE_JOB_UUID_FILE_PATTERN=${BUILDKITE_PLUGIN_JUNIT_ANNOTATE_JOB_UUID_FILE_PATTERN:-}" \
    --env "BUILDKITE_PLUGIN_JUNIT_ANNOTATE_FAILURE_FORMAT=${BUILDKITE_PLUGIN_JUNIT_ANNOTATE_FAILURE_FORMAT:-}" \
    junit_annotate_buildkite_plugin_workenv ruby /src/bin/annotate /junits \
      > "$annotation_path"

cat "$annotation_path"

if grep -q "<details>" "$annotation_path"; then

  if ! check_size; then
    echo "--- :warning: Failures too large to annotate"
    echo "The failures are too large to create a build annotation. Please inspect the failed JUnit artifacts manually."
  else
    echo "--- :buildkite: Creating annotation"
    # shellcheck disable=SC2002
    cat "$annotation_path" | buildkite-agent annotate --context "${BUILDKITE_PLUGIN_JUNIT_ANNOTATE_CONTEXT:-junit}" --style error
  fi

  if [[ "${BUILDKITE_PLUGIN_JUNIT_ANNOTATE_FAIL_BUILD_ON_ERROR:-false}" =~ (true|on|1) ]]
  then
    echo "--- :boom: Failing build due to error"
    exit 1
  fi
fi
